package org.stockchart.series;

import org.json.JSONException;
import org.json.JSONObject;
import org.stockchart.core.Area;
import org.stockchart.core.Axis;
import org.stockchart.core.SeriesPaintInfo;
import org.stockchart.series.points.AbstractPoint;
import org.stockchart.series.renderers.AbstractRenderer;
import org.stockchart.series.renderers.NullRenderer;
import org.stockchart.utils.JSONSerializable;
import org.stockchart.utils.Reflection;

import android.graphics.Canvas;


public class Series extends JSONSerializable
{
	private Axis.Side fXAxisSide = Axis.Side.BOTTOM;
	private Axis.Side fYAxisSide = Axis.Side.RIGHT;
	
	private int fXAxisVirtualId = 0;
	private int fYAxisVirtualId = 0;
		
	private int fIndexOffset = 0;
	
	private boolean fIsVisible = true;
	
	private double fLastValue = Double.NaN;
	
	private String fName; 
		
	private IPointAdapter fPointAdapter;
	
	private AbstractRenderer fRenderer;
	
	private String fAreaName;
	
	private static int DEFAULT_NAME_ID = 0;
		
	public interface IPointAdapter
	{
		public int getPointCount();
		public AbstractPoint getPointAt(int i);	
	}

	public Series()
	{		
		this(Area.DEFAULT_NAME, new NullRenderer());		
	}
	
	public Series(String areaName, AbstractRenderer renderer)
	{		
		setAreaName(areaName);
		setName(this.getClass().getSimpleName()+String.valueOf(++DEFAULT_NAME_ID));
		setRenderer(renderer);
	}
	
	public String getAreaName() { return fAreaName; }
	public void setAreaName(String areaName) { fAreaName = areaName; } 
	
	public void setRenderer(AbstractRenderer r)
	{
		fRenderer = r;
	}
	
	public AbstractRenderer getRenderer()
	{
		return fRenderer;
	}
	
	public IPointAdapter getPointAdapter()
	{
		return fPointAdapter;
	}
	
	public void setPointAdapter(IPointAdapter adapter)
	{
		fPointAdapter = adapter;
	}
	
	public JSONObject toJSONObject() throws JSONException
	{
		JSONObject j = super.toJSONObject();
		
		j.put("name",fName);
		j.put("areaName", fAreaName);
		j.put("indexOffset", fIndexOffset);
		j.put("xAxisSide",fXAxisSide);
		j.put("yAxisSide", fYAxisSide);
		j.put("xAxisVirtualId",fXAxisVirtualId);
		j.put("yAxisVirtualId", fYAxisVirtualId);
		
		j.put("visible", fIsVisible);
		
		if(!Double.isNaN(fLastValue))
			j.put("lastValue", fLastValue);
			
		j.put("rendererClass", this.getRenderer().getClass().getName());
		
		JSONObject rnd = this.getRenderer().toJSONObject();		
		if(null != rnd)
		{			
			j.put("rendererParams", rnd);
		}
		
		return j;
	}
	
	public void fromJSONObject(JSONObject j) throws JSONException
	{
		fName = j.getString("name");
		fAreaName = j.optString("areaName");
		fIndexOffset = j.getInt("indexOffset");		
		fXAxisSide = Axis.Side.valueOf(j.getString("xAxisSide"));
		fYAxisSide = Axis.Side.valueOf(j.getString("yAxisSide"));
		fIsVisible = j.getBoolean("visible");
		fXAxisVirtualId = j.getInt("xAxisVirtualId");
		fYAxisVirtualId = j.getInt("yAxisVirtualId");
		fLastValue = j.has("lastValue")?j.getDouble("lastValue"):Double.NaN;
		
		AbstractRenderer r = (AbstractRenderer) Reflection.newInstance(j.getString("rendererClass"));
	
		if(j.has("rendererParams"))
			r.fromJSONObject(j.getJSONObject("rendererParams"));
		
		this.setRenderer(r);
	}
	
	public String getName()
	{
		return fName;
	}
	
	public void setName(String value)
	{
		fName = value;
	}
	
	public boolean isVisible()
	{
		return fIsVisible;
	}
	
	public void setVisible(boolean value)
	{
		fIsVisible = value;
	}
	
		
	public void setXAxisSide(Axis.Side side)
	{
		fXAxisSide = side;
	}
	
	public void setYAxisSide(Axis.Side side)
	{
		fYAxisSide = side;
	}
		
	public Axis.Side getXAxisSide()
	{		
		return fXAxisSide;
	}
	
	public Axis.Side getYAxisSide()
	{
		return fYAxisSide;
	}
	
		
	public double getPointValueAt(int i,int valueIndex)
	{
		return this.getPointAt(i).getValues()[valueIndex];
	}
	
	public double[] getMaxMinPrice(double viewMax,double viewMin)
	{
		if(!isVisibleOnScreen(viewMax,viewMin)) return null;

		double max = Double.NaN;
		double min = Double.NaN;
		
		int arrayIndex = convertToArrayIndexZeroBased(viewMin);
							
		for(int i=arrayIndex;i<getPointCount();i++)
		{
			AbstractPoint p = getPointAt(i);
			
			double[] maxMin = p.getMaxMin();
						
			max = (0 == Double.compare(max, Double.NaN))?maxMin[0]:Math.max(maxMin[0], max);
			min = (0 == Double.compare(min, Double.NaN))?maxMin[1]:Math.min(maxMin[1], min);
			
			if(convertToScaleIndex(i) > viewMax)
				break;
		}
		
		return new double[] { max, min };	
	}
	
	public double[] getMaxMinPrice2(int startIndex,int endIndex)
	{
		double max = Double.MIN_VALUE;
		double min = Double.MAX_VALUE;
		
		for(int i=startIndex;i<=endIndex;i++)
		{
			AbstractPoint p = getPointAt(i);
			
			double[] maxMin = p.getMaxMin();
			if(maxMin[0] > max)
				max = maxMin[0];
			
			if(maxMin[1] < min)
				min = maxMin[1];
		}
		
		return new double[] { max, min };
	}
	
	public AbstractPoint getPointAtValue(double value)
	{
		int index = this.convertToArrayIndex(value);
		
		if(index < 0)
			index = 0;
		
		if(index >=0 && this.getPointCount() > 0)
		{
			if(index >= this.getPointCount())
				index = this.getPointCount() - 1;
			
			return this.getPointAt(index);
		}
		
		return null;
	}
	
	public AbstractPoint getFirstPoint()
	{
		return getPointAt(0);
	}
	
	public AbstractPoint getLastPoint()
	{
		return getPointAt(getPointCount() - 1);
	}
	
	public void setIndexOffset(int offset)
	{
		fIndexOffset = offset;
	}
	
	public int getIndexOffset()
	{
		return fIndexOffset;
	}
	
	public int convertToArrayIndexZeroBased(double value)
	{
		int index = convertToArrayIndex(value);
		
		if(index < 0)
			index = 0;
	
		return index;
	}
	
	public int convertToArrayIndex(double value)
	{
		return (int)Math.round(value) - fIndexOffset;
	}
	
	public float convertToScaleIndex(int indexInArray)
	{
		return (float)(fIndexOffset + indexInArray);
	}
	
	public boolean hasPoints()
	{
		return getPointCount() > 0;
	}
	
	public float getLastScaleIndex()
	{
		return convertToScaleIndex(getPointCount() - 1);
	}
	
	public float getFirstScaleIndex()
	{
		return convertToScaleIndex(0);
	}
	
	public void setLastValue(double value)
	{
		fLastValue = value;		
	}

	public double getLastValue()
	{
		return fLastValue;
	}

	public int getXAxisVirtualId() {
		return fXAxisVirtualId;
	}

	public void setXAxisVirtualId(int v) {
		this.fXAxisVirtualId = v;
	}


	public int getYAxisVirtualId() {
		return fYAxisVirtualId;
	}

	public void setYAxisVirtualId(int v) {
		this.fYAxisVirtualId = v;
	}
	
	public boolean isVisibleOnScreen(double viewMax, double viewMin)
	{
		if(!isVisible() || !hasPoints()) return false;
		
		if(getFirstScaleIndex() > viewMax || getLastScaleIndex() < viewMin) return false;
		
		return true;	
	}	

	public AbstractPoint getPointAt(int i)
	{
		return (null == fPointAdapter?null:this.fPointAdapter.getPointAt(i));
	}
	
	public void draw(Canvas c, SeriesPaintInfo pinfo)
	{			
		if(!isVisibleOnScreen(pinfo.X.Max, pinfo.X.Min)) return;
		
		int index = convertToArrayIndexZeroBased(pinfo.X.Min);

		int cX1 = Integer.MAX_VALUE, cX2 = Integer.MIN_VALUE;
		int cY1 = Integer.MIN_VALUE, cY2 = Integer.MAX_VALUE;

		
		this.getRenderer().preDraw(c);
		
		for(int i=Math.max(index-1,0);i<getPointCount();i++)
		{
			AbstractPoint p = this.getPointAt(i);		
			
			float scaleIndex = convertToScaleIndex(i);
			
			if(p.isVisible())
			{							
				double[] maxMin = p.getMaxMin();

				int y1 = pinfo.getY(maxMin[0]);
				int y2 = pinfo.getY(maxMin[1]);

				int x1 = pinfo.getX(scaleIndex - 0.5f) + 1;
				int x2 = pinfo.getX(scaleIndex + 0.5f) - 1;

				if (x1 > x2)
				{
					x2 = x1;
				}

				int minX = Math.min(x1, x2);
				int maxX = Math.max(x1, x2);
				
				int minY = Math.min(y1, y2);
				int maxY = Math.max(y1, y2);

				boolean insideX = minX >= cX1 && maxX <= cX2;
				boolean inside = insideX && minY >= cY1 && maxY <= cY2;

				if(!inside)
					this.getRenderer().drawPoint(c, pinfo, x1, x2, p);
				
				cX1 = minX;
				cX2 = maxX;					

				if (insideX && (minY < cY1 || cY1 == Integer.MIN_VALUE))
					cY1 = minY;
				else if (!insideX)
					cY1 = Integer.MIN_VALUE;

				if (insideX && (maxY > cY2 || cY2 == Integer.MAX_VALUE))
					cY2 = maxY;
				else if (!insideX)
					cY2 = Integer.MAX_VALUE;

			}
			
			if(scaleIndex > pinfo.X.Max)
				break;
		}
		
		this.getRenderer().postDraw(c);
	}
		
	public int getPointCount()
	{
		return (null == fPointAdapter?0:this.fPointAdapter.getPointCount());
	}
		
}
